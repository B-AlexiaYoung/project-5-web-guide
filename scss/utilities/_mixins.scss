// mixin for generating background colors for buttons.
// @each $theme, $color in $ui-colors{
 //   .btn--#{$theme}{
 //           background-color:$color;    
  //  }
//};   


// mixin for generating background for grid background colors then button background colors.
@mixin gd-colors{
@each $theme, $color in $colours{
 .theme__colors.grid__col--#{$theme}{
        background-color:$color
    } 
};
 @each $theme, $color in $colours{
 .theme__colors.btn--#{$theme}{
         background-color:$color;
            }
}
};
// mixin for calulating column widths

// adjacent sibling margins
    @mixin doubly ($margin: 1em) {
    & + &{
    margin-left: $margin;
    @content;
    }
};    


// mixin media query breakpoints  breakpoint variables set at 1px,769px and 1110px respectively.
@mixin media-qry($break){
@if $break == "small"{
    @media(min-width: $breakpoint-small){
      @include gd-colors; 
       @content;
        
    }
}
@else if $break =="medium"{
 @media(min-width: $breakpoint-medium){
    @include gd-colors;
     @content;
 }
}
@else if $break == "large"{
    @media(min-width: $breakpoint-large){
        @include gd-colors;
        
        @content;
    }
}
@else {
    @error "Could not retrieve value for `#{$break}`"
}
};


// mixin for nav items spacing 

@mixin spacing{
padding-top: $nav-pad-top;
padding-left: $nav-pad-left;
padding-right: $nav-pad-right;
};

// mixin to create flex container


@mixin flex-container(
    $display:flex,
    $flex-dir:null,
    $wrap:null,
    $justify:null){
        display: $display;
        flex-direction: $flex-dir;
        flex-wrap: $wrap;
        justify-content: $justify;
        };